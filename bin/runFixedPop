#! /usr/bin/env python

# Code: runFixedPop.py
# Version: 1
# Version changes: SAMPLE FIXED POPULATION OF BINARIES AND EVOLVE WITH BSE; 
#                  COMPUTE RATES AND NUMBERS FOR EACH POPULATION ACCORDING
#                  TO FLAGS SET BY USER
#
# Edited on:  8 SEP 2015


##############################################################################
#  IMPORT ALL NECESSARY PYTHON PACKAGES
##############################################################################
from collections import OrderedDict
import warnings
import argparse
import ConfigParser

import math
import random
import time
from time import sleep
import string
import os.path

import numpy as np
import scipy.special as ss


from aCOSMIC.sample import Sample
from aCOSMIC import MatchKnuth as Match
from aCOSMIC.evolve import Evolve

##################################################################################
# DEFINE COMMANDLINE ARGUMENTS
##################################################################################
def parse_commandline():
    """Parse the arguments given on the command-line.
    """
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--inifile", help="Name of ini file of params", required=True)
    parser.add_argument("--galaxy-component", help="Galaxy Components. Options include Bulge ThinDisk and ThickDisk", required=True)
    parser.add_argument("--Niter", help="Number of iterations of binaries to try, will check ever Nstep for convergence", type=int, default=10000)
    parser.add_argument("--Nstep", help="Number of binaries to try before checking for convergence, it will check ever Nstep binaries until it reach Niter binaries", type=int, default=100)
    parser.add_argument("--verbose", action="store_true", default=False, help="Run in Verbose Mode")
    args = parser.parse_args()

    return args

##################################################################################
# BEGIN MAIN FUNCTION
##################################################################################
if __name__ == '__main__':

    # READ COMMANDLINE ARGUMENTS
    ##############################################################################
    args = parse_commandline()


    # SET TIME TO TRACK COMPUTATION TIME
    ##############################################################################
    start_time = time.time()
    
    # CONSTANTS
    ##############################################################################
    G = 6.67384*math.pow(10, -11.0)
    c = 2.99792458*math.pow(10, 8.0)
    parsec = 3.08567758*math.pow(10, 16)
    Rsun = 6.955*math.pow(10, 8)
    Msun = 1.9891*math.pow(10,30)
    day = 86400.0
    rsun_in_au = 215.0954
    day_in_year = 365.242
    sec_in_day = 86400.0
    sec_in_hour = 3600.0
    hrs_in_day = 24.0
    sec_in_year = 3.15569*10**7.0
    Tobs = 3.15569*10**7.0
    geo_mass = G/c**2
    

    # ---- Create configuration-file-parser object and read parameters file.
    cp = ConfigParser.ConfigParser()
    cp.optionxform = str
    cp.read(args.inifile)

    # ---- Read needed variables from [parameters], [system], and [bse] sections.
    # -- Parameters
    nBin = cp.getint('parameters', 'Nbin')
    Nepochs = cp.getint('parameters', 'Nepochs')
    epochLength = cp.getfloat('parameters', 'epochLength')
    Ncores = cp.getint('parameters', 'Ncores')
    Ngalaxies = cp.getint('parameters', 'Ngalaxies')
    Ncores = cp.getint('parameters', 'Ncores')
    metallicity = cp.getfloat('parameters', 'metallicity')
    SFH = cp.get('parameters', 'SFH')
    SFR = cp.getfloat('parameters', 'SFR')
    binwidth = cp.getfloat('parameters', 'binwidth')
    saveFileFlag = cp.getint('parameters', 'saveFileFlag')
    LISAflag = cp.getint('parameters', 'LISAflag')

    # -- system

    system_flags = OrderedDict(cp.items('system'))

    if args.verbose:
        print 'You have selected the following combination of system flags: '.format(system_flags)

    binFlag = [int(i) for i in system_flags.values()]
    binID = system_flags.keys()

    # ASSIGN BINARY IDs ACCORDING TO LOOPING VARIABLE ii
    ############################################################################## 
    # ii    binID     binFlag    
    ##############################################################################
    #  0    HeHe      0 or 1    
    #  1    HeCO      0 or 1
    #  2    HeONe     0 or 1
    #  3    COCO      0 or 1
    #  4    COONe     0 or 1
    #  5    ONeONe    0 or 1
    #  6    NSHe      0 or 1            
    #  7    NSCO      0 or 1  
    #  8    NSONe     0 or 1
    #  9    NSNS      0 or 1
    #  10   NSBH      0 or 1
    #  11   BHBH      0 or 1
    #  12   BHHe      0 or 1
    #  13   BHCO      0 or 1
    #  14   BHONe     0 or 1

    # -- bse

    neta = cp.getfloat('bse', 'neta')
    bwind = cp.getfloat('bse', 'bwind')
    hewind = cp.getfloat('bse', 'hewind')
    alpha1 = cp.getfloat('bse', 'alpha1')
    lambdaf = cp.getfloat('bse', 'lambdaf')
    ceflag = cp.getint('bse', 'ceflag')
    tflag = cp.getint('bse', 'tflag')
    ifflag = cp.getint('bse', 'ifflag')
    wdflag = cp.getint('bse', 'wdflag')
    bhflag = cp.getint('bse', 'bhflag')
    nsflag = cp.getint('bse', 'nsflag')
    mxns = cp.getfloat('bse', 'mxns')
    pts1 = cp.getfloat('bse', 'pts1')
    pts2 = cp.getfloat('bse', 'pts2')
    pts3 = cp.getfloat('bse', 'pts3')
    sigma = cp.getfloat('bse', 'sigma')
    beta = cp.getfloat('bse', 'beta')
    xi = cp.getfloat('bse', 'xi')
    acc2 = cp.getfloat('bse', 'acc2')
    epsnov = cp.getfloat('bse', 'epsnov')
    eddfac = cp.getfloat('bse', 'eddfac')
    gamma = cp.getfloat('bse', 'gamma')
    bconst = cp.getint('bse', 'bconst')
    CK = cp.getint('bse', 'CK')
    merger = cp.getint('bse', 'merger')
    windflag = cp.getint('bse', 'windflag')
    fbkickswitch = cp.getint('bse', 'fbkickswitch')

    # Make dictionary of all BSE parameters for readablility reasons
    BSEDict = {}
    BSEDict['neta'] = neta
    BSEDict['bwind'] = bwind
    BSEDict['hewind'] = hewind
    BSEDict['alpha1'] = alpha1
    BSEDict['lambdaf'] = lambdaf
    BSEDict['ceflag'] = ceflag
    BSEDict['tflag'] = tflag
    BSEDict['ifflag'] = ifflag
    BSEDict['wdflag'] = wdflag
    BSEDict['bhflag'] = bhflag
    BSEDict['nsflag'] = nsflag
    BSEDict['mxns'] = mxns
    BSEDict['pts1'] = pts1
    BSEDict['pts2'] = pts2
    BSEDict['pts3'] = pts3
    BSEDict['sigma'] = sigma
    BSEDict['beta'] = beta
    BSEDict['xi'] = xi
    BSEDict['acc2'] = acc2
    BSEDict['epsnov'] = epsnov
    BSEDict['eddfac'] = eddfac
    BSEDict['gamma'] = gamma
    BSEDict['bconst'] = bconst
    BSEDict['CK'] = CK
    BSEDict['merger'] = merger
    BSEDict['windflag'] = windflag
    BSEDict['fbkickswitch'] = fbkickswitch

    evolvedsystemsall = []
    while args.Nstep < args.Niter:
        initconditions = Sample(metallicity = metallicity, size = args.Nstep)
        initconditions.mass1 = initconditions.sample_kroupa93(size=args.Nstep)
        initconditions.mass1_binary, initconditions.mass1_single = initconditions.binary_select(initconditions.mass1)
        initconditions.mass2_binary = initconditions.sample_secondary(initconditions.mass1_binary)
        # Outputs in meters
        initconditions.sep =  initconditions.sample_separation(size = initconditions.mass1_binary.size)
        initconditions.porb =  initconditions.sep_to_porb(initconditions.mass1_binary, initconditions.mass2_binary, initconditions.sep)
        initconditions.ecc =  initconditions.sample_ecc(size = initconditions.mass1_binary.size)
        initconditions.tphysf = initconditions.sample_constant_SFH(t_component = 10000, size = initconditions.mass1_binary.size)
        initconditions.kstar1 = initconditions.set_kstar(initconditions.mass1_binary)
        initconditions.kstar2 = initconditions.set_kstar(initconditions.mass2_binary)

        # Now that we have all these initial conditions let's create an Evolve class and evolve these systems
        evolve = Evolve(initconditions)
        bpp, bcm = evolve.evolve(nproc=1, BSEDict=BSEDict)
        import pdb
        pdb.set_trace()
